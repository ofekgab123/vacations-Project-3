{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ofekg\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\Project-3\\\\frontend\\\\src\\\\components\\\\Login\\\\login.tsx\";\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport \"./login.css\";\nimport { store } from '../../redux/store';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { ActionType } from '../../redux/action-type';\nexport class LoginPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.userNameChange = args => {\n      const userName = args.target.value;\n      const loginInput = { ...this.state.loginInput\n      };\n      loginInput.userName = userName;\n      this.setState({\n        loginInput\n      });\n    };\n\n    this.passwordChange = args => {\n      const password = args.target.value;\n      const loginInput = { ...this.state.loginInput\n      };\n      loginInput.password = password;\n      console.log(loginInput.password);\n      this.setState({\n        loginInput\n      });\n    };\n\n    this.login = () => {\n      if (this.state.isLogin === true) {\n        alert(\"Sorry but another user is online\");\n        return;\n      }\n\n      const loginInput = { ...this.state.loginInput\n      };\n\n      if (loginInput.userName.length < 2 || loginInput.password.length < 4) {\n        alert('Enter valid details');\n        return;\n      }\n\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify(this.state.loginInput)\n      };\n      fetch(\"http://localhost:3001/api/login\", options).then(async response => {\n        if (!response.ok) throw new Error((await response.text()));\n        return response;\n      }).then(response => response.json()).then(user => {\n        const actionUser = {\n          type: ActionType.getUser,\n          payload: user[0]\n        };\n        store.dispatch(actionUser);\n        const actionIsLogin = {\n          type: ActionType.updateIsLogin,\n          payload: true\n        };\n        store.dispatch(actionIsLogin);\n        this.sendJWT();\n        window.location.href = '/';\n      }).catch(err => alert(err));\n    };\n\n    this.sendJWT = () => {\n      const optionsJWT = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify(store.getState().user)\n      }; // save to JWT \n\n      fetch(\"http://localhost:3001/api/login/login-save\", optionsJWT).then(response => response.json()) // save in localstorage for auto login with unique token\n      .then(res => localStorage.setItem('token', res.token)).catch(err => alert(err));\n    };\n\n    this.state = {\n      loginInput: {\n        userName: '',\n        password: ''\n      },\n      user: store.getState().user,\n      isLogin: store.getState().isLogin\n    };\n    console.log(store.getState().isLogin);\n  }\n\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      className: \"LoginPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Login\"), React.createElement(TextField, {\n      className: \"input\",\n      onChange: this.userNameChange,\n      label: \"User Name\",\n      variant: \"filled\",\n      size: \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      className: \"input\",\n      onChange: this.passwordChange,\n      label: \"Password\",\n      type: \"password\",\n      autoComplete: \"current-password\",\n      variant: \"filled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: \"button-login\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(NavLink, {\n      to: \"/register\",\n      exact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"button-register\",\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Register\"))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ofekg/OneDrive/שולחן העבודה/Project-3/frontend/src/components/Login/login.tsx"],"names":["React","Component","NavLink","store","TextField","Button","ActionType","LoginPage","constructor","props","userNameChange","args","userName","target","value","loginInput","state","setState","passwordChange","password","console","log","login","isLogin","alert","length","options","method","headers","body","JSON","stringify","fetch","then","response","ok","Error","text","json","user","actionUser","type","getUser","payload","dispatch","actionIsLogin","updateIsLogin","sendJWT","window","location","href","catch","err","optionsJWT","getState","res","localStorage","setItem","token","render"],"mappings":"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","sourcesContent":["import React, { Component, SyntheticEvent } from 'react';\r\nimport {NavLink, Redirect } from 'react-router-dom';\r\nimport { UserModel } from '../../models/user-model';\r\nimport \"./login.css\"\r\nimport{ store }from '../../redux/store';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Action } from '../../redux/action';\r\nimport { ActionType } from '../../redux/action-type';\r\n\r\n\r\n\r\n\r\ninterface LoginState {\r\n    loginInput: any;\r\n    user: UserModel;\r\n    isLogin:boolean\r\n\r\n}\r\nexport class LoginPage extends Component<{}, LoginState> {\r\n    public constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            loginInput: {\r\n                userName: '',\r\n                password: ''\r\n            },\r\n            user: store.getState().user,\r\n            isLogin:store.getState().isLogin\r\n\r\n        }\r\n       console.log(store.getState().isLogin);\r\n       \r\n        \r\n    }\r\n    \r\n\r\n    private userNameChange = (args: SyntheticEvent) => {\r\n        const userName = (args.target as HTMLSelectElement).value;\r\n        const loginInput = { ...this.state.loginInput };\r\n        loginInput.userName = userName;\r\n\r\n        \r\n        this.setState({ loginInput });\r\n    }\r\n    private passwordChange = (args: SyntheticEvent) => {\r\n        const password = (args.target as HTMLSelectElement).value;\r\n        const loginInput = { ...this.state.loginInput };\r\n        loginInput.password = password;\r\n        console.log(loginInput.password);\r\n        \r\n        this.setState({ loginInput });\r\n    }\r\n    private login = () => {\r\n        if(this.state.isLogin===true){\r\n            alert(\"Sorry but another user is online\")\r\n            return;\r\n        }\r\n        const loginInput = { ...this.state.loginInput };\r\n        if (loginInput.userName.length < 2 || loginInput.password.length < 4) {\r\n            alert('Enter valid details');\r\n            return;\r\n        }\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(this.state.loginInput)\r\n        };\r\n\r\n        fetch(\"http://localhost:3001/api/login\", options)\r\n            .then(async response => {\r\n                if (!response.ok)\r\n                    throw new Error(await response.text());\r\n                return response;\r\n            })\r\n            .then(response => response.json())\r\n            .then(user => {\r\n                const actionUser: Action = {\r\n                    type: ActionType.getUser,\r\n                    payload: user[0]\r\n                };\r\n                store.dispatch(actionUser);\r\n\r\n                const actionIsLogin: Action = {\r\n                    type: ActionType.updateIsLogin,\r\n                    payload: true\r\n                };\r\n                store.dispatch(actionIsLogin);\r\n                this.sendJWT();\r\n                window.location.href='/'\r\n            })\r\n            .catch(err => alert(err));\r\n    }\r\n    private sendJWT = () => {\r\n        const optionsJWT = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(store.getState().user)\r\n        };\r\n        // save to JWT \r\n        fetch(\"http://localhost:3001/api/login/login-save\", optionsJWT)\r\n            .then(response => response.json())\r\n            // save in localstorage for auto login with unique token\r\n            .then(res => localStorage.setItem('token', res.token))\r\n            .catch(err => alert(err));\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        \r\n        console.log(this.props);\r\n        return (\r\n            \r\n            <div className=\"LoginPage\">\r\n            <div className='input-user'>\r\n             <h1>Login</h1>\r\n                        <TextField  className=\"input\" onChange={this.userNameChange}\r\n                            label=\"User Name\"\r\n                            variant=\"filled\"\r\n                            size=\"medium\"\r\n                            />\r\n                 \r\n                        <TextField className=\"input\"  onChange={this.passwordChange}\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            variant=\"filled\"\r\n                           \r\n                        />\r\n          \r\n                        <Button className=\"button-login\"  variant=\"contained\" color=\"primary\" onClick={this.login}>Login</Button>\r\n                  \r\n                    <br></br>\r\n              \r\n                        <NavLink to='/register' exact>\r\n                            <Button className=\"button-register\" variant=\"contained\" color=\"secondary\">Register</Button>\r\n                        </NavLink>\r\n                        </div>\r\n\r\n                        </div>\r\n\r\n                \r\n      \r\n        );\r\n    }}"]},"metadata":{},"sourceType":"module"}